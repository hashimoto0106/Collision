ライセンス
サードパーティライブラリ

ドキュメント自動生成
D:\github\Python\ApplicationPackage\doc


衝突判定技ノート


================================================================

自動試験フレームワークunittestの以下を試してください。
ApplicationPackage\test
Spyderでtest_fizzbuzz.pyを実行してみてください。
import unittestに失敗したら声をかけてください。


07/01打ち合わせ中に、衝突判定計算について貴志殿からコメントされた内容はできるだけ設計書に反映願います。


ライセンス条文にある
PSFのライセンス契約、およびPSFの著作権表示、「Copyright (c) 2001 Python Software Foundation; All Rights Reserved」を記載する

2. 本ライセンス契約に定める諸条件に従って、PSFは被許諾者に対し、
単体もしくは派生バージョンのPython 2.1.1を複製、解析、テスト、
公然と実行および/または表示、派生成果物の作成、頒布、その他の方法で使用する非独占的な、
権利使用料無料の、世界規模のライセンスを付与します。
ただし、単体または被許諾者が作成する派生バージョンのPython 2.1.1に、PSFのライセンス契約、
およびPSFの著作権表示、すなわち「Copyright (c) 2001 Python Software Foundation; All Rights Reserved」
を記載することを条件とします。

「単体または...派生バージョンの...」と書いてあります。
import しただけではPython 単体を使用しているわけではないので、派生バージョンかどうかを考えれば よいことになります。 派生バージョンのソフトウェアと考えられるものとしては

修正: ソースコードの書き換え
追加: 他のソースコードにコピー
リンク: 静的リンク、動的リンク
があり、 派生ソフトウェアと見なさない行為として

単なる同梱
API を介した呼出
OSS による作業
があるということです。

このことから、標準ライブラリをインポートして使うだけであればこれは単なるAPI 呼びだし(コンパイルしていないので静的、動的リンクはしない) なので
PSFのライセンス契約、およびPSFの著作権表示、すなわち「Copyright (c) 2001 Python Software Foundation; All Rights Reserved」を記載する
必要はないと考えられます。


================================================================

pythonライセンス

Python を使うのに著作権の制限はありますか？
あなたが作成する Python に関するドキュメントのすべてに著作権を残し、それらの著作権を表示する限り、ソースコードをどのように扱ってもかまいません。この著作権規則を尊重する限り、商用に Python を利用しても、ソースあるいはバイナリ形式で(変更の有無にかかわらず) Python のコピーを販売しても、Python が何らかの形で組み込まれた製品を販売してかまいません。もちろん、Python のあらゆる商業用途についても同様です。
ライセンスのより詳しい説明と全文へのリンクは the PSF license page を参照してください。

Python Software Foundation License(PSFL)はBSDスタイルの許容的フリーソフトウェアライセンスであり、GNU General Public Licenseと互換性のあるライセンスである[1]。このライセンスの主な用途は、Pythonプロジェクトの配布用である。GPLとは異なり、PSFLはコピーレフトのライセンスではない。そのため、コードをオープンソースにせずに元のソースコードの変更をすることが許されている。

★サードパーティライブラリをインポート
BSD 系っぽい気がする。ゆるい。
制限少なめ。自由多め。
GPL のように派生物のライセンスに関する規定は特にないようなので、自分の好きなライセンスにしてもよいようです。
ノートにははっきりと、GPL とは違うよ、あなたの変更をオープンソースに(GPLに)する必要はない
<http://kenkov.hatenablog.jp/entry/2012/09/09/061347>

================================================================
下記を参考に文法チェックpep8の有効設定をお願いします。


CDMファイル読み込み
D:\github\Python\File



重積分を実行した際に、出力結果として「推定誤差」が出力されましたか？
戻り値は積分近似値と推定誤差のタプルのはずです。

台形則やシンプソン則により積分するには、あらかじめ刻み幅を指定しておく必要があるようです。
<https://qiita.com/maskot1977/items/51caa6c8cbf8a2c691db>

積分方式によって、引数やlinspaceメソッドによって演算精度を設定できるようです。
以下を参考にdblquad（2 次元積分）の演算精度について検討し、
VBAにあった刻み幅の要否について考えておいてください。Max 30min
<https://python.atelierkobato.com/scipy_integrate/>

■台形公式
scipy.integrate.trapz(y, x=None, dx=1.0, axis=-1)

■シンプソンの公式
scipy.integrate.simps(y, x=None, dx=1, axis=-1, even='avg')

■フレネル積分
上記URL参照

■指数積分
x = np.linspace(-4, 4, 1025)  # 区間[-4,4]を1024分割
ei = expi(x)  # 指数積分Ei(x)

■ドーソン積分
x = np.linspace(-10, 10, 513)  # 区間[-10,10]を512分割
ds = dawsn(x)  # 正弦積分

参考
https://univ-study.net/nijyuusekibun/
https://org-technology.com/posts/integrate-function.html
https://qiita.com/sci_Haru/items/09279cf81b9b073afa1d
https://techacademy.jp/magazine/28374

================================================================






今回のVBA→Python移植に際して、詳細設計書の見出しを一部見直しました。
必要に応じて追加・削除ください。
問題なければ、調査用エクセルではなく直接上記文書を更新しても構いません。
クラス図やシーケンス図を追加しようと思いますが、それほど気にせずワード文書を作成すればよいかと。
なお、既存文書からの変更箇所はワード変更履歴から確認できます。

ユースケース図、ロバストネス図、入出力データ一覧も追加したく。
ロバストネス図は口頭で?明します。


★デブリ接近情報
https://www.google.co.jp/search?lr=lang_ja&hl=ja&tbs=lr%3Alang_1ja&source=hp&q=%20%E3%83%87%E3%83%96%E3%83%AA%E6%8E%A5%E8%BF%91%E6%83%85%E5%A0%B1

★デブリ接近情報 CDM
https://www.google.co.jp/search?lr=lang_ja&hl=ja&tbs=lr%3Alang_1ja&sxsrf=ALeKk00QlR4fqfSXwfzFG6_mRNuYYF0jFQ%3A1593005931926&ei=a1fzXu6ROJLj-Aa7_YPQDQ&q=%E3%83%87%E3%83%96%E3%83%AA%E6%8E%A5%E8%BF%91%E6%83%85%E5%A0%B1+CDM&oq=%E3%83%87%E3%83%96%E3%83%AA%E6%8E%A5%E8%BF%91%E6%83%85%E5%A0%B1+CDM&gs_lcp=CgZwc3ktYWIQAzoICAAQsAMQzQI6BQgAEM0CUNLQC1jW0wtgpdYLaAFwAHgAgAGSAYgBiwKSAQMwLjKYAQCgAQGgAQKqAQdnd3Mtd2l6&sclient=psy-ab&ved=0ahUKEwiu88nFyZrqAhWSMd4KHbv-ANoQ4dUDCAw&uact=5


接近アラート情報（CDM: Conjunction Data Message）

★Conjunction Data Message
https://www.google.co.jp/search?lr=lang_ja&hl=ja&tbs=lr%3Alang_1ja&sxsrf=ALeKk03o-jSY9aeWPU9G-v9KA03OhMRbUg%3A1593006124982&ei=LFjzXozFO4y7wAPNz4C4DQ&q=Conjunction+Data+Message&oq=Conjunction+Data+Message&gs_lcp=CgZwc3ktYWIQA1D09BZY9PQWYMr4FmgCcAB4AIABAIgBAJIBAJgBAKABAqABAaoBB2d3cy13aXo&sclient=psy-ab&ved=0ahUKEwiMi9GhyprqAhWMHXAKHc0nANcQ4dUDCAw&uact=5

★接近データメッセージ（CDM）
http://stage.tksc.jaxa.jp/ccsds/docs/files/bluebook/moims/508_0_b_1.pdf
「接近データメッセージ（Conjunction Data Message: CDM）」は、宇宙物体の接近情報に関するメッセージフォーマットを規定するもので
ある。接近評価の実施機関と、衛星所有者／衛星運用者および関連組織との間でデータ交換を行う際に使用することを目的としている。
CDMは、ASCIIテキストのファイルであり、本書では、‘keyword = value notation’ 形式とXML形式のフォーマットについて述べている。
CDMはHeader部とBody部から構成される。Body部は「Relative Metadata/data」 と「Segment」から構成され、Segmentは「物体1（Object1）」と「物
体2（Object2）」の2つのSegmentで構成される。また、1つのSegmentは、「Metadata」と「Data」の2つのセクションから構成される。CDMの主なデータ項目を以下の表に示す。


★スペースデブリに関する取組について
https://www8.cao.go.jp/space/comittee/27-kiban/kiban-dai45/pdf/siryou1-1.pdf
カタログ化された軌道上物体は約19,521個(大きさ10cm以上、SpaceTrack.org,2019年3月25日)。
?世界全体で衝突回避運用は約100回／年程度実施されている。
?より微小なミッション終了など致命的な故障に繋がるより微小デブリは50～70万個(大きさ1cm以上) 。
? 追跡、防護、除去が困難。宇宙機の破砕・衝突の未然防止が唯一の対応策。
SSAはある程度以上の観測・追跡が可能なデブリの軌道を予測し、衝突予測に基づき宇宙
機の回避運用を行うもの。
? SSAの技術開発の方向性は①軌道の予測精度を向上してより確度の高い衝突警報を出す
こと、②より細かいデブリを観測できるようにしてSSAによる対応領域を拡大すること、③環境モ
デルを軌道上検証等により、改良していくこと。
主な宇宙機関のデブリ対策関連ツールの整備状況



